apply plugin: 'com.android.application'

apply from: "${rootDir}/environment/environment.gradle"
apply from: "${rootDir}/gradle/jacoco.gradle"

project.ext {
    support_version = '26.1.0'
    dagger_version = '2.11'
    retrofit_version = '2.3.0'
    architecture_components_version = '1.0.0-alpha9-1'
    auto_value_version = '1.5'
    auto_value_gson_version = '0.5.0'
    glide_version = '4.1.1'
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.weatherforecast"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("../environment/release-keystore.jks")
            storePassword getPrivateConfig("WEATHER_FORECAST_RELEASE_SIGNING_STORE_PASSWORD")
            keyAlias getPrivateConfig("WEATHER_FORECAST_RELEASE_SIGNING_KEY_ALIAS")
            keyPassword getPrivateConfig("WEATHER_FORECAST_RELEASE_SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled = true

            buildConfigField "String", "WEATHER_FORECAST_API_KEY", getApiKey()
        }
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false
            testCoverageEnabled = true

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "WEATHER_FORECAST_API_KEY", getApiKey()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet false
        abortOnError false
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            forkEvery = 100
            maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

            reports {
                junitXml.enabled = true
                html.enabled = false
            }

            // set heap size for the test JVM(s)
            minHeapSize = "128m"
            maxHeapSize = "512m"

            beforeTest { descr ->
                logger.info("Running test: ${descr.name}")
            }
            afterTest { descr, result ->
                def time = result.endTime - result.startTime
                logger.info("Test ${descr.className} ${descr.name}: $time ms")
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // ANDROID
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    compile "com.android.support:cardview-v7:$support_version"
    compile "com.android.support:design:$support_version"

    // REACTIVE
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'

    // DAGGER
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    compile "com.google.dagger:dagger:$dagger_version"
    compileOnly "javax.annotation:jsr250-api:1.0"

    // RETROFIT
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    // ARCHITECTURE COMPONENTS
    compile "android.arch.lifecycle:runtime:$architecture_components_version"
    compile "android.arch.lifecycle:extensions:$architecture_components_version"
    annotationProcessor "android.arch.lifecycle:compiler:$architecture_components_version"

    // ROOM
    compile "android.arch.persistence.room:runtime:$architecture_components_version"
    annotationProcessor "android.arch.persistence.room:compiler:$architecture_components_version"
    compile "android.arch.persistence.room:rxjava2:$architecture_components_version"

    // AUTO VALUE
    compileOnly "com.google.auto.value:auto-value:$auto_value_version"
    annotationProcessor "com.google.auto.value:auto-value:$auto_value_version"
    compile 'com.google.code.gson:gson:2.8.1'
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$auto_value_gson_version"
    compileOnly "com.ryanharter.auto.value:auto-value-gson:$auto_value_gson_version"

    // GLIDE
    compile "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // TEST
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.9.0'
}

def getApiKey() {
    def value = getPrivateConfig("WEATHER_FORECAST_APP_API_KEY")
    return "\"$value\""
}

def getPrivateConfig(String key) {
    return ext.environment.findValueFor(key)
}
